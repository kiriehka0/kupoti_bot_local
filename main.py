import sqlite3
import telebot
from config import *
import random
from randoms import *
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from openai import OpenAI

bot = telebot.TeleBot(f"{TOKEN}")
conn = sqlite3.connect(r"database.db3", check_same_thread=False)
cursor = conn.cursor()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_results = {}
temp_place_data = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤—ã—Ö –º–µ—Å—Ç–∞—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
client = OpenAI(
    api_key="sk-hBp5bpQ7j2vUkwVDhUUmISa12HjGIUVx",
    base_url="https://api.proxyapi.ru/openai/v1",
)

def analyze_comment(comment):
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–û—Ü–µ–Ω–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: '—Ö–æ—Ä–æ—à–∏–π' –∏–ª–∏ '–ø–ª–æ—Ö–æ–π'."
                },
                {
                    "role": "user",
                    "content": comment
                }
            ],
            temperature=0.0  # –î–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        )
        return response.choices[0].message.content.strip().lower()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"


# –†–ê–ë–û–¢–ê –° –¢–ì –ö–ê–ù–ê–õ–û–ú
CHANNEL_ID = -1002591278253


@bot.channel_post_handler(content_types=['text', 'photo'])
def handle_channel_post(message):
    if message.chat.id != CHANNEL_ID:
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.photo:
        photo_id = message.photo[-1].file_id
        text = message.caption if message.caption else ""
    else:
        photo_id = None
        text = message.text

    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
    place_data = parse_place_info(text)

    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if not place_data:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                          "–ù–∞–∑–≤–∞–Ω–∏–µ: –ü—Ä–∏–º–µ—Ä\n"
                                          "–û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–∏–º–µ—Ä\n"
                                          "–ö–ª—é—á: –ø—Ä–∏–º–µ—Ä")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –º–µ—Å—Ç–æ
    cursor.execute("SELECT place_name FROM places")
    places = [x[0].lower() for x in cursor.fetchall()]
    if place_data["name"].lower() in places:
        bot.send_message(message.chat.id,
                         "–¢–∞–∫–æ–µ –º–µ—Å—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.")
        return

    # –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
    add_place_to_db(place_data, photo_id)
    bot.send_message(message.chat.id, f"–ú–µ—Å—Ç–æ '{place_data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")


def parse_place_info(text):
    data = {}
    required_fields = ['–Ω–∞–∑–≤–∞–Ω–∏–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–∫–ª—é—á']
    lines = [line.strip() for line in text.split('\n') if line.strip()]

    for line in lines:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
        if ':' not in line:
            continue

        key_part, value_part = line.split(':', 1)
        key = key_part.strip().lower()
        value = value_part.strip()

        if key in required_fields:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
            if key == '–Ω–∞–∑–≤–∞–Ω–∏–µ':
                data['name'] = value
            elif key == '–æ–ø–∏—Å–∞–Ω–∏–µ':
                data['description'] = value
            elif key == '–∫–ª—é—á':
                data['key'] = value

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if all(field in data for field in ['name', 'description', 'key']):
        return data
    return None


def add_place_to_db(place_data, photo_id=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Å—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    cursor.execute(
        """INSERT INTO places 
        (key, place_name, description, img) 
        VALUES (?, ?, ?, ?)""",
        (
            place_data['key'].lower(),
            place_data['name'],
            place_data['description'],
            photo_id
        )
    )
    conn.commit()


# –ö–û–ù–ï–¶ –†–ê–ë–û–¢–´ –° –¢–ì –ö–ê–ù–ê–õ–û–ú

def db_table_val(user_id: int, username):
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    cursor.execute("UPDATE users SET username = ? WHERE user_id = ?", (username, user_id))
    conn.commit()


def save_user_query(user_id, query):
    cursor.execute(
        "UPDATE users SET last_query = ? WHERE user_id = ?", (query, user_id)
    )
    conn.commit()


@bot.callback_query_handler(func=lambda call: call.data.startswith(("next2_", "prev2_")))
def handle_comment_pagination(call):
    user_id = call.from_user.id
    results = user_results.get(user_id)
    # –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Å—Ç–∞
    cursor.execute("SELECT rowid FROM places WHERE place_name = ?", (results[user_results["index"]][0],))
    place_id = cursor.fetchone()[0]
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if call.data.startswith("next2_"):
        offset = int(call.data.split("_")[1])
    else:
        offset = int(call.data.split("_")[1])
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π/–ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ–ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    cursor.execute(
        "SELECT up.comment_user, up.user_id, u.username, up.sentiment, up.feedback2 FROM user_places up LEFT JOIN users u ON up.user_id = u.user_id WHERE up.place_id = ? AND up.comment_user IS NOT NULL AND up.comment_user != '' LIMIT 1 OFFSET ?",
        (place_id, offset))
    comment_data = cursor.fetchone()
    if comment_data:
        comment_text, comment_user_id, username, sentiment, feedback = comment_data
        markup = InlineKeyboardMarkup()
        buttons = []
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if offset > 0:
            buttons.append(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"prev2_{offset - 1}"))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        cursor.execute("""
            SELECT COUNT(*) 
            FROM user_places 
            WHERE place_id = ? 
            AND comment_user IS NOT NULL
            AND comment_user != ''
            AND rowid > (
                SELECT rowid 
                FROM user_places 
                WHERE place_id = ? 
                AND comment_user IS NOT NULL
                AND comment_user != ''
                LIMIT 1 OFFSET ?
            )
        """, (place_id, place_id, offset))
        has_next = cursor.fetchone()[0] > 0
        if has_next:
            buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥", callback_data=f"next2_{offset + 1}"))
        if buttons:
            markup.row(*buttons)
        feedback = comment_data[4]
        sentiment = comment_data[3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ë–î
        emoji = "üòä" if sentiment == "—Ö–æ—Ä–æ—à–∏–π" else "üòû" if sentiment == "–ø–ª–æ—Ö–æ–π" else "üòê"
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text= f"{emoji} <b>{username}</b> –æ—Ü–µ–Ω–∏–ª –Ω–∞ {feedback}/10:\n"
                  f"{comment_text}",
            parse_mode="HTML",
            reply_markup=markup
        )


def search_places(query):
    cursor.execute("SELECT key FROM places")
    keys = set(cursor.fetchall())
    cursor.execute("SELECT place_name FROM places")
    a = set(cursor.fetchall())
    results = []
    for key in keys:
        if str(key[0]).lower() in query.lower():
            cursor.execute(
                "SELECT place_name, feedback, description, img FROM places WHERE key = ? ORDER BY feedback DESC",
                (key[0],),
            )
            results.extend(cursor.fetchall())
    for place_name in a:
        if str(place_name[0]).lower() in query.lower():
            cursor.execute(
                "SELECT place_name, feedback, description, img FROM places WHERE place_name = ? ORDER BY feedback DESC",
                (place_name[0],),
            )
            results.extend(cursor.fetchall())
    return results


@bot.callback_query_handler(func=lambda call: call.data == "comments")
def comments_callback(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    results = user_results.get(user_id)
    cursor.execute("SELECT rowid FROM places WHERE place_name = ?", (results[user_results["index"]][0],))
    place_id = cursor.fetchone()[0]
    cursor.execute(
        "SELECT COUNT(*) FROM user_places WHERE place_id = ? AND comment_user IS NOT NULL AND comment_user != ''",
        (place_id,))
    total_comments = cursor.fetchone()[0]
    user_results["number"] = total_comments
    user_results["comment_index"] = 0
    if total_comments > 0:
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        offset = 0
        while True:
            cursor.execute(
                "SELECT up.comment_user, up.user_id, u.username, up.sentiment, up.feedback2 FROM user_places up LEFT JOIN users u ON up.user_id = u.user_id WHERE up.place_id = ? AND up.comment_user IS NOT NULL AND up.comment_user != '' LIMIT 1 OFFSET ?",
                (place_id, offset))
            comment_data = cursor.fetchone()
            comment_text, comment_user_id, username, sentiment, feedback = comment_data
            if comment_text:  # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø—É—Å—Ç–æ–π
                sentiment = comment_data[3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ë–î
                feedback = comment_data[4]
                emoji = "üòä" if sentiment == "—Ö–æ—Ä–æ—à–∏–π" else "üòû" if sentiment == "–ø–ª–æ—Ö–æ–π" else "üòê"
                comment =  (f"{emoji} <b>{username}</b> –æ—Ü–µ–Ω–∏–ª –Ω–∞ {feedback}/10:\n"
                            f"{comment_text}")
                markup = InlineKeyboardMarkup()
                if total_comments > offset + 1:
                    markup.add(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥", callback_data=f"next2_{offset + 1}"))
                bot.send_message(call.message.chat.id, comment, reply_markup=markup, parse_mode="HTML")
                return
            else:
                offset += 1
                if offset >= total_comments:
                    break
    else:
        markup = InlineKeyboardMarkup()
        bot.send_message(call.message.chat.id, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ. üòï", reply_markup=markup)


@bot.message_handler(commands=["start"])
def start_message(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞", callback_data="search"))
    markup.add(InlineKeyboardButton("üìå –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–∞, –≥–¥–µ –±—ã–ª", callback_data="show"))
    markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ", callback_data="add_place"))
    greeting = random.choice(GREETINGS)
    bot.send_message(
        message.chat.id,
        f"{greeting}\n\n–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "show")
def show_callback(call):
    us_id = call.from_user.id
    cursor.execute(
        "SELECT p.place_name, p.feedback, p.description, p.img FROM places p JOIN user_places up ON p.rowid = up.place_id WHERE up.user_id = ? ORDER BY feedback DESC",
        (us_id,),
    )
    visited_places = cursor.fetchall()
    if visited_places:
        user_results[us_id] = visited_places
        send_result(call.message.chat.id, us_id, 0)
    else:
        bot.send_message(call.message.chat.id, "–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –æ—Ç–º–µ—á–∞–ª–∏ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞. üßê")


@bot.message_handler(commands=["menu"])
def start_message(message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞", callback_data="search"))
    markup.add(InlineKeyboardButton("üìå –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–∞, –≥–¥–µ –±—ã–ª", callback_data="show"))
    markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ", callback_data="add_place"))
    bot.send_message(message.chat.id, "<b>üéÄ–ì–õ–ê–í–ù–û–ï –ú–ï–ù–ÆüéÄ</b>", reply_markup=markup, parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data == "point")
def point_callback(call):
    user_id = call.from_user.id
    results = user_results.get(user_id)
    place_name = results[user_results["index"]][0]
    cursor.execute("SELECT rowid FROM places WHERE place_name = ?", (place_name,))
    place_row = cursor.fetchone()
    place_id = place_row[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏
    cursor.execute(
        "SELECT 1 FROM user_places WHERE user_id = ? AND place_id = ?",
        (user_id, place_id),
    )
    if cursor.fetchone():
        bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏ —ç—Ç–æ –º–µ—Å—Ç–æ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–µ. üòä")
    else:
        msg = bot.send_message(
            call.message.chat.id,
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ. üåü\n"
            "–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –µ–≥–æ –æ—Ç 0 –¥–æ 10? (10 - —ç—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!)")
        bot.register_next_step_handler(msg, point_db0, user_id)


def point_db0(message, us_id):
    results = user_results.get(us_id)
    if not results:
        bot.send_message(message.chat.id, "–û–®–ò–ë–ö–ê")
    place_name = results[user_results["index"]][0]
    feedback = message.text
    try:
        feedback_int = int(feedback)
        if feedback_int < 0 or feedback_int > 10:
            raise ValueError
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. üòÖ\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10:")
        bot.register_next_step_handler(msg, point_db0, us_id)
        return
    cursor.execute("SELECT count_user FROM places WHERE place_name = ?", (place_name,))
    a = cursor.fetchone()[0]
    if a:
        count_user = a + 1
    else:
        count_user = 1
    cursor.execute("SELECT sum_feedback FROM places WHERE place_name = ?", (place_name,))
    b = cursor.fetchone()[0]
    if b:
        sum_feedback = b + feedback_int
    else:
        sum_feedback = feedback_int
    cursor.execute(
        "UPDATE places SET count_user = ?, sum_feedback = ?, feedback = ? WHERE place_name = ? ",
        (count_user, sum_feedback, round(sum_feedback / count_user, 1), place_name))
    conn.commit()
    msg = bot.send_message(message.chat.id,
                           "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! üíñ\n"
        "–ù–µ —Ö–æ—Ç–∏—Ç–µ –ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?\n"
        "(–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)")
    bot.register_next_step_handler(msg, point_db, us_id, feedback_int)


def point_db(message, us_id, feedback_int):
    results = user_results.get(us_id)
    if message.text and message.text.lower() == "/skip":
        comment = None
        sentiment = None
        bot.send_message(
            message.chat.id,
            "–•–æ—Ä–æ—à–æ, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. üòä –ë–æ–ª—å—à–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –º–µ—Å—Ç—É üò´")
    else:
        comment = message.text
        sentiment = analyze_comment(message.text)
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üôè\n"
            "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )
    place_name = results[user_results["index"]][0]
    # –ù–∞—Ö–æ–¥–∏–º place_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–µ—Å—Ç–∞
    cursor.execute("SELECT rowid FROM places WHERE place_name = ?", (place_name,))
    place_row = cursor.fetchone()
    if not place_row:
        bot.send_message(message.chat.id, "–û–®–ò–ë–ö–ê: –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    place_id = place_row[0]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏
    cursor.execute(
        "SELECT 1 FROM user_places WHERE user_id = ? AND place_id = ?",
        (us_id, place_id)
    )
    #if cursor.fetchone():
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
       # cursor.execute(
         #   "UPDATE user_places SET comment_user = ? WHERE user_id = ? AND place_id = ?",
           # (comment, us_id, place_id)
       # )
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    cursor.execute(
        "INSERT INTO user_places (user_id, place_id, comment_user, sentiment, feedback2) VALUES (?, ?, ?, ?, ?)",
        (us_id, place_id, comment, sentiment, feedback_int)
    )
    conn.commit()
    bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ üòä")


@bot.callback_query_handler(func=lambda call: call.data == "search")
def search_callback(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id,
        "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞–π—Ç–∏? üîç\n"
        "–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è, –º–µ—Å—Ç–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '—Ö–æ—á—É –ø–æ–π—Ç–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É', '—Ç–µ–∞—Ç—Ä', '–º—É–∑–µ–π', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω'")


@bot.callback_query_handler(func=lambda call: call.data == "add_place")
def add_place_callback(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—Ç–∞
    temp_place_data[user_id] = {"chat_id": call.message.chat.id, "data": {}}
    msg = bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ. üò∫\n"
                                                 "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /cancel\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–µ –º–µ—Å—Ç–æ?")
    bot.register_next_step_handler(msg, process_place_name, user_id)


def process_place_name(message, user_id):
    if message.text == "/cancel":
        if user_id in temp_place_data:
            del temp_place_data[user_id]
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        start_message(message)
        return
    else:
        cursor.execute("SELECT place_name FROM places")
        places = [x[0].lower() for x in cursor.fetchall()]
        if message.text.lower() in places:
            bot.send_message(
                message.chat.id, "–¢–∞–∫–æ–µ –º–µ—Å—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ üòä\n")
            msg = bot.send_message(message.chat.id,  "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            bot.register_next_step_handler(msg, process_place_name, user_id)
        else:
            temp_place_data[user_id]["data"]["name"] = message.text
            msg = bot.send_message(
                message.chat.id,  "–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ –º–µ—Å—Ç–æ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10? üåü\n"
                "(1 - —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, 10 - –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!)")
            bot.register_next_step_handler(msg, process_comment, user_id)


def process_comment(message, user_id):
    if message.text == "/cancel":
        if user_id in temp_place_data:
            del temp_place_data[user_id]
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        start_message(message)
        return
    else:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
            feedback = int(message.text)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            if feedback < 1 or feedback > 10:
                raise ValueError("–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
            # –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
            count_user = 1
            sum_feedback = feedback
            temp_place_data[user_id]["data"]["sum_feedback"] = sum_feedback
            temp_place_data[user_id]["data"]["count_user"] = count_user
            temp_place_data[user_id]["data"]["feedback"] = round(sum_feedback / count_user, 1)
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            msg = bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –º–µ—Å—Ç–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
            )
            bot.register_next_step_handler(msg, process_place_feedback, user_id)
        except ValueError as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            error_msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10"
            if str(e) == "–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10":
                error_msg = str(e)
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É
            msg = bot.send_message(message.chat.id, error_msg)
            bot.register_next_step_handler(msg, process_comment, user_id)


def process_place_feedback(message, user_id):
    if message.text == "/cancel":
        if user_id in temp_place_data:
            del temp_place_data[user_id]
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        start_message(message)
        return
    else:
        if message.text.lower() == "/skip":
            temp_place_data[user_id]["data"]["comment"] = None
            temp_place_data[user_id]["data"]["sentiment"] = None

        else:
            temp_place_data[user_id]["data"]["comment"] = message.text
            temp_place_data[user_id]["data"]["sentiment"] = analyze_comment(message.text)
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞:")
        bot.register_next_step_handler(msg, process_place_description, user_id)


def process_place_description(message, user_id):
    if message.text == "/cancel":
        if user_id in temp_place_data:
            del temp_place_data[user_id]
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        start_message(message)
        return
    else:
        temp_place_data[user_id]["data"]["description"] = message.text
        msg = bot.send_message(
            message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç—ç–≥(–∫–ª—é—á), –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç—Ç–æ –º–µ—Å—Ç–æ:"
        )
        bot.register_next_step_handler(msg, process_keys, user_id)


def process_keys(message, user_id):
    if message.text == "/cancel":
        if user_id in temp_place_data:
            del temp_place_data[user_id]
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        start_message(message)
        return
    else:
        temp_place_data[user_id]["data"]["key"] = message.text.lower()
        msg = bot.send_message(
            message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )
        bot.register_next_step_handler(msg, process_place_photo, user_id)


def process_place_photo(message, user_id):
    if message.text == "/cancel":
        if user_id in temp_place_data:
            del temp_place_data[user_id]
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        start_message(message)
        return
    else:
        chat_id = temp_place_data[user_id]["chat_id"]
        data = temp_place_data[user_id]["data"]
        if message.photo:
            data["img"] = message.photo[-1].file_id
        elif message.text and message.text.lower() == "/skip":
            data["img"] = None
        else:
            msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip")
            bot.register_next_step_handler(msg, process_place_photo, user_id)
            return

        cursor.execute(
            "INSERT INTO places (key, place_name, feedback, count_user, sum_feedback, description, img) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (
                data["key"],
                data["name"],
                data["feedback"],
                data["count_user"],
                data["sum_feedback"],
                data["description"],
                data.get("img"),
            ),
        )
        responses = random.choice(RESPONSES)
        conn.commit()
        bot.send_message(
            chat_id,
            f"{responses}",
        )
        cursor.execute(
            "SELECT rowid FROM places WHERE place_name = ?",
            (temp_place_data[user_id]["data"]["name"],),
        )
        place_row = cursor.fetchone()
        place_id = place_row[0]
        cursor.execute(
            "INSERT INTO user_places (user_id, place_id, comment_user, sentiment, feedback2) VALUES (?, ?, ?, ?, ?)",
            (user_id, place_id, temp_place_data[user_id]["data"]["comment"], data["sentiment"], data["sum_feedback"])
        )
        conn.commit()
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in temp_place_data:
            del temp_place_data[user_id]
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start_message(bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?"))


@bot.message_handler(content_types=["text"])
def get_text_message(message):
    us_id = message.from_user.id
    username = message.from_user.username
    db_table_val(us_id, username)
    user_text = message.text
    save_user_query(us_id, user_text)
    user_results[us_id] = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞
    if us_id in temp_place_data:
        bot.send_message(
            message.chat.id, "‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel"
        )
        return
    results = search_places(user_text)
    if not results:
        bot.send_message(
            message.chat.id, "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
        )
        return
    user_results[us_id] = results
    user_results["index"] = 0
    send_result(message.chat.id, us_id, 0)


def send_result(chat_id, user_id, index):
    results = []
    user_results["index"] = index
    for x in range(len(user_results[user_id])):
        results.append(user_results[user_id][x])
    place = results[index]
    message_text = (
        f"üìç –ú–µ—Å—Ç–æ: {place[0]}\n"
        f"‚úèÔ∏è –†–µ–π—Ç–∏–Ω–≥: {place[1]} ‚≠ê\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {place[2]}\n\n"
    )

    markup = InlineKeyboardMarkup()
    # –ö–Ω–æ–ø–∫–∞ "–°–∫—Ä—ã—Ç—å"
    markup.add(InlineKeyboardButton("‚úñÔ∏è –°–∫—Ä—ã—Ç—å", callback_data="unseen"))
    markup.add(InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â—ë–Ω–Ω—ã–º", callback_data="point"))
    markup.add(InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="comments"))

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    buttons = []
    if index > 0:
        buttons.append(
            InlineKeyboardButton("< –ù–∞–∑–∞–¥", callback_data=f"prev_{index - 1}")
        )
    if index < len(results) - 1:
        buttons.append(
            InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ >", callback_data=f"next_{index + 1}")
        )
    if buttons:
        markup.row(*buttons)
    if place[3]:
        bot.send_photo(
            chat_id, photo=f"{place[3]}", caption=message_text, reply_markup=markup
        )
    else:
        bot.send_message(chat_id, message_text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "unseen":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        return

    us_id = call.from_user.id
    results = user_results.get(us_id)

    if not results:
        bot.answer_callback_query(
            call.id, "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"
        )
        return

    if call.data.startswith("prev_"):
        new_index = int(call.data.split("_")[1])
        if 0 <= new_index < len(results):
            edit_result(call.message, results, new_index)

    elif call.data.startswith("next_"):
        new_index = int(call.data.split("_")[1])
        if 0 <= new_index < len(results):
            edit_result(call.message, results, new_index)
    bot.answer_callback_query(call.id)


def edit_result(message, results, new_index):
    user_results["index"] = new_index
    place = results[new_index]
    message_text = (
        f"üìç –ú–µ—Å—Ç–æ: {place[0]}\n"
        f"‚úèÔ∏è –†–µ–π—Ç–∏–Ω–≥: {place[1]} ‚≠ê\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {place[2]}\n\n"
    )
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úñÔ∏è –°–∫—Ä—ã—Ç—å", callback_data="unseen"))
    markup.add(InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â—ë–Ω–Ω—ã–º", callback_data="point"))
    markup.add(InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="comments"))
    buttons = []

    if new_index > 0:
        buttons.append(
            InlineKeyboardButton("< –ù–∞–∑–∞–¥", callback_data=f"prev_{new_index - 1}")
        )

    if new_index < len(results) - 1:
        buttons.append(
            InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ >", callback_data=f"next_{new_index + 1}")
        )

    if buttons:
        markup.row(*buttons)

    if place[3]:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
        if message.photo:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            new_media = InputMediaPhoto(media=place[3], caption=message_text)
            bot.edit_message_media(
                media=new_media,
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=markup,
            )
        else:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_photo(
                message.chat.id,
                photo=place[3],
                caption=message_text,
                reply_markup=markup,
            )
    else:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ
        if message.photo:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, message_text, reply_markup=markup)
        else:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            bot.edit_message_text(
                message_text,
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=markup,
            )


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
