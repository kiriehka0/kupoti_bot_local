import telebot
import os
import random
from randoms import *
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from openai import OpenAI

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from database_service import DatabaseService
from ai_service import AIService
from parser_service import ParserService
from dotenv import load_dotenv

load_dotenv()
bot = telebot.TeleBot(os.getenv("TOKEN"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
db_service = DatabaseService()
ai_service = AIService()
parser_service = ParserService()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_results = {}
temp_place_data = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤—ã—Ö –º–µ—Å—Ç–∞—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
CHANNEL_ID = -1002591278253
client = OpenAI(
    api_key=os.getenv("KEY"),
    base_url=os.getenv("URL"),
    timeout=20.0,
    max_retries=3
)


# –†–ê–ë–û–¢–ê –° –ö–ê–ù–ê–õ–û–ú
@bot.channel_post_handler(content_types=['text', 'photo'])
def handle_channel_post(message):
    if message.chat.id != CHANNEL_ID:
        return

    if message.photo:
        photo_id = message.photo[-1].file_id
        text = message.caption or ""
    else:
        photo_id = None
        text = message.text or ""

    place_data = parser_service.parse_place_info(text)

    if not place_data:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                          "–ù–∞–∑–≤–∞–Ω–∏–µ: –ü—Ä–∏–º–µ—Ä\n"
                                          "–û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–∏–º–µ—Ä\n"
                                          "–ö–ª—é—á: –ü—Ä–∏–º–µ—Ä")
        return

    if db_service.place_exists(place_data["name"]):
        bot.send_message(message.chat.id,
                         "–¢–∞–∫–æ–µ –º–µ—Å—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    db_service.add_place_to_db(place_data, photo_id)
    bot.send_message(message.chat.id, f"–ú–µ—Å—Ç–æ '{place_data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
# –ö–û–ù–ï–¶ –†–ê–ë–û–¢–´ –° –¢–ì –ö–ê–ù–ê–õ–û–ú



@bot.callback_query_handler(func=lambda call: call.data == "show")
def show_callback(call):
    us_id = call.from_user.id
    visited_places = db_service.get_visited_places(us_id)
    if visited_places:
        user_results[us_id] = visited_places
        send_result(call.message.chat.id, us_id, 0)
    else:
        bot.send_message(call.message.chat.id, "–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –æ—Ç–º–µ—á–∞–ª–∏ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞. üßê")


@bot.callback_query_handler(func=lambda call: call.data == "add_user_place")
def add_user_place_callback(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    temp_place_data[user_id] = {"chat_id": call.message.chat.id, "data": {}}
    msg = bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ. üò∫\n"
                                                 "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /cancel\n"
                                                 "–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–µ –º–µ—Å—Ç–æ?")
    bot.register_next_step_handler(msg, process_place_name, user_id)


def process_place_name(message, user_id):
    if message.text in ["/cancel", "/menu"]:
        del temp_place_data[user_id]
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
        start_message(message)
        return

    if db_service.place_exists(message.text):
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–µ –º–µ—Å—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ üòä")
        msg = bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        bot.register_next_step_handler(msg, process_place_name, user_id)
        return

    temp_place_data[user_id]["data"]["name"] = message.text
    msg = bot.send_message(message.chat.id, "–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ –º–µ—Å—Ç–æ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10?")
    bot.register_next_step_handler(msg, process_feedback, user_id)


def process_feedback(message, user_id):
    try:
        feedback = int(message.text)
        if not (1 <= feedback <= 10):
            raise ValueError
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")
        bot.register_next_step_handler(msg, process_feedback, user_id)
        return

    data = temp_place_data[user_id]["data"]
    data["sum_feedback"] = feedback
    data["count_user"] = 1
    data["feedback"] = round(feedback, 1)

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –º–µ—Å—Ç–µ (–∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    bot.register_next_step_handler(msg, process_place_description, user_id)


def process_place_description(message, user_id):
    if message.text == "/skip":
        temp_place_data[user_id]["data"]["comment"] = None
        temp_place_data[user_id]["data"]["sentiment"] = None
    else:
        temp_place_data[user_id]["data"]["comment"] = message.text
        temp_place_data[user_id]["data"]["sentiment"] = ai_service.analyze_comment(message.text)

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞:")
    bot.register_next_step_handler(msg, process_keys, user_id)


def process_keys(message, user_id):
    temp_place_data[user_id]["data"]["description"] = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç—ç–≥ (–∫–ª—é—á), –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —ç—Ç–æ –º–µ—Å—Ç–æ:")
    bot.register_next_step_handler(msg, process_place_photo, user_id)


def process_place_photo(message, user_id):
    temp_place_data[user_id]["data"]["key"] = message.text.lower()
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ—Å—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    bot.register_next_step_handler(msg, save_new_place, user_id)


def save_new_place(message, user_id):
    data = temp_place_data[user_id]["data"]
    chat_id = temp_place_data[user_id]["chat_id"]

    if message.photo:
        data["img"] = message.photo[-1].file_id
    elif message.text and message.text.lower() == "/skip":
        data["img"] = None
    else:
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip")
        bot.register_next_step_handler(msg, save_new_place, user_id)
        return

    db_service.add_place_to_db(data, data["img"])

    responses = random.choice(RESPONSES)
    bot.send_message(chat_id, responses)

    place_row = db_service.get_place_by_name(data["name"])
    if not place_row:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Å—Ç–∞.")
        return

    place_id = place_row[0]
    db_service.mark_place_visited(
        user_id=user_id,
        place_id=place_id,
        feedback=data["sum_feedback"],
        comment=data["comment"],
        sentiment=data["sentiment"]
    )

    del temp_place_data[user_id]
    bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?")
    start_message(message)


@bot.message_handler(commands=["start"])
def start_message(message):
    user_id = message.from_user.id
    username = message.from_user.username
    db_service.add_user(user_id, username)

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞", callback_data="search"))
    markup.add(InlineKeyboardButton("üìå –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–∞, –≥–¥–µ –±—ã–ª", callback_data="show"))
    markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ", callback_data="add_user_place"))

    if db_service.check_user_role(user_id, "admin") or db_service.check_user_role(user_id, "manager"):
        markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ (mod)", callback_data="add_place"))
        markup.add(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ (mod)", callback_data="edit_place"))
    if db_service.check_user_role(user_id, "admin"):
        markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ (mod)", callback_data="delete_place"))
        markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (mod)", callback_data="delete_user"))
        markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (mod)", callback_data="delete_comment"))
        markup.add(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å (mod)", callback_data="assign_role"))

    greeting = random.choice(GREETINGS)
    bot.send_message(message.chat.id, f"{greeting}\n–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                     reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "point")
def point_callback(call):
    user_id = call.from_user.id
    results = user_results.get(user_id)
    place_name = results[user_results["index"]][0]
    place_row = db_service.get_place_by_name(place_name)
    place_id = place_row[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏
    if db_service.user_visited_place(user_id, place_id):
        bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏ —ç—Ç–æ –º–µ—Å—Ç–æ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–µ. üòä")
    else:
        msg = bot.send_message(
            call.message.chat.id,
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ. üåü\n"
            "–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –µ–≥–æ –æ—Ç 0 –¥–æ 10? (10 - —ç—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!)")
        bot.register_next_step_handler(msg, point_db0, user_id, place_id, place_name)


def point_db0(message, us_id, place_id, place_name):
    results = user_results.get(us_id)
    if not results:
        bot.send_message(message.chat.id, "–û–®–ò–ë–ö–ê")
    feedback = message.text
    try:
        feedback_int = int(feedback)
        if feedback_int < 0 or feedback_int > 10:
            raise ValueError
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. üòÖ\n"
                                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10:")
        bot.register_next_step_handler(msg, point_db0, us_id, place_id, place_name)
        return
    msg = bot.send_message(message.chat.id,
                           "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! üíñ\n"
                           "–ù–µ —Ö–æ—Ç–∏—Ç–µ –ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?\n"
                           "(–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)")
    bot.register_next_step_handler(msg, point_db, us_id, place_id, feedback_int)


def point_db(message, us_id, place_id, feedback_int):
    if message.text and message.text.lower() == "/skip":
        comment = None
        sentiment = None
        bot.send_message(
            message.chat.id,
            "–•–æ—Ä–æ—à–æ, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. üòä –ë–æ–ª—å—à–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –º–µ—Å—Ç—É üò´")
    else:
        comment = message.text
        sentiment = ai_service.analyze_comment(comment)
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üôè\n"
            "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )
    # –ù–∞—Ö–æ–¥–∏–º place_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–µ—Å—Ç–∞
    db_service.mark_place_visited(
        user_id=us_id,
        place_id=place_id,
        feedback=feedback_int,
        comment=comment,
        sentiment=sentiment
    )
    bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ üòä")


@bot.message_handler(commands=["menu"])
def start_message(message):
    markup = InlineKeyboardMarkup()
    user_id = message.from_user.id
    markup.add(InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞", callback_data="search"))
    markup.add(InlineKeyboardButton("üìå –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–∞, –≥–¥–µ –±—ã–ª", callback_data="show"))
    markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ", callback_data="add_user_place"))

    if  db_service.check_user_role(user_id, "admin") or  db_service.check_user_role(user_id, "manager"):
        markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ(mod)", callback_data="add_place"))
        markup.add(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ(mod)", callback_data="edit_place"))

    if  db_service.check_user_role(user_id, "admin"):
        markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ(mod)", callback_data="delete_place"))
        markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(mod)", callback_data="delete_user"))
        markup.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(mod)", callback_data="delete_comment"))
        markup.add(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å(mod)", callback_data="assign_role"))

    bot.send_message(message.chat.id, "<b>üéÄ–ì–õ–ê–í–ù–û–ï –ú–ï–ù–ÆüéÄ</b>", reply_markup=markup, parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: call.data == "search")
def search_callback(call):
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id,
                     "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞–π—Ç–∏? üîç\n"
                     "–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.\n"
                     "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ø—Ä–æ–≥—É–ª–∫–∞', '—Ç–µ–∞—Ç—Ä', '–º—É–∑–µ–π', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω'")


@bot.callback_query_handler(func=lambda call: call.data == "comments")
def comments_callback(call):
    print("YES0")
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    results = user_results.get(user_id)
    place_name = results[user_results["index"]][0]
    place = db_service.get_place_by_name(place_name)
    if not place:
        bot.send_message(call.message.chat.id, "–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    place_id = place[0]
    total_comments = db_service.get_total_comments(place_id)
    user_results["number"] = total_comments
    user_results["comment_index"] = 0
    if total_comments > 0:
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        offset = 0
        while True:
            comment_data = db_service.get_next_non_empty_comment(place_id, offset)
            comment_text, comment_user_id, username, sentiment, feedback = comment_data
            if comment_text:  # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø—É—Å—Ç–æ–π
                sentiment = comment_data[3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ë–î
                feedback = comment_data[4]
                emoji = "üòä" if sentiment == "—Ö–æ—Ä–æ—à–∏–π" else "üòû" if sentiment == "–ø–ª–æ—Ö–æ–π" else "üòê"
                comment = (f"{emoji} <b>{username}</b> –æ—Ü–µ–Ω–∏–ª –Ω–∞ {feedback}/10:\n"
                           f"{comment_text}")
                markup = InlineKeyboardMarkup()
                if total_comments > offset + 1:
                    markup.add(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥", callback_data=f"next2_{offset + 1}"))
                bot.send_message(call.message.chat.id, comment, reply_markup=markup, parse_mode="HTML")
                return
            else:
                offset += 1
                if offset >= total_comments:
                    break
    else:
        markup = InlineKeyboardMarkup()
        bot.send_message(call.message.chat.id, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ. üòï",
                         reply_markup=markup)

@bot.message_handler(content_types=["text"])
def get_text_message(message):
    us_id = message.from_user.id
    username = message.from_user.username
    db_service.add_user(us_id, username)
    user_text = message.text
    db_service.save_query(us_id, user_text)
    user_results[us_id] = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞
    if us_id in temp_place_data:
        bot.send_message(
            message.chat.id, "‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel"
        )
        return
    results = db_service.search_places(user_text)
    if not results:
        bot.send_message(
            message.chat.id, "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
        )
        return
    user_results[us_id] = results
    user_results["index"] = 0
    send_result(message.chat.id, us_id, 0)


def send_result(chat_id, user_id, index):
    results = []
    user_results["index"] = index
    for x in range(len(user_results[user_id])):
        results.append(user_results[user_id][x])
    place = results[index]
    message_text = (
        f"üìç –ú–µ—Å—Ç–æ: {place[0]}\n"
        f"‚úèÔ∏è –†–µ–π—Ç–∏–Ω–≥: {place[1]} ‚≠ê\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {place[2]}\n\n"
    )

    markup = InlineKeyboardMarkup()
    # –ö–Ω–æ–ø–∫–∞ "–°–∫—Ä—ã—Ç—å"
    markup.add(InlineKeyboardButton("‚úñÔ∏è –°–∫—Ä—ã—Ç—å", callback_data="unseen"))
    markup.add(InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â—ë–Ω–Ω—ã–º", callback_data="point"))
    markup.add(InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="comments"))

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    buttons = []
    if index > 0:
        buttons.append(
            InlineKeyboardButton("< –ù–∞–∑–∞–¥", callback_data=f"prev_{index - 1}")
        )
    if index < len(results) - 1:
        buttons.append(
            InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ >", callback_data=f"next_{index + 1}")
        )
    if buttons:
        markup.row(*buttons)
    if place[3]:
        bot.send_photo(
            chat_id, photo=f"{place[3]}", caption=message_text, reply_markup=markup
        )
    else:
        bot.send_message(chat_id, message_text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data == "unseen":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        return

    us_id = call.from_user.id
    results = user_results.get(us_id)

    if not results:
        bot.answer_callback_query(
            call.id, "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"
        )
        return

    if call.data.startswith("prev_"):
        new_index = int(call.data.split("_")[1])
        if 0 <= new_index < len(results):
            edit_result(call.message, results, new_index)

    elif call.data.startswith("next_"):
        new_index = int(call.data.split("_")[1])
        if 0 <= new_index < len(results):
            edit_result(call.message, results, new_index)
    bot.answer_callback_query(call.id)


def edit_result(message, results, new_index):
    user_results["index"] = new_index
    place = results[new_index]
    message_text = (
        f"üìç –ú–µ—Å—Ç–æ: {place[0]}\n"
        f"‚úèÔ∏è –†–µ–π—Ç–∏–Ω–≥: {place[1]} ‚≠ê\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {place[2]}\n\n"
    )
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚úñÔ∏è –°–∫—Ä—ã—Ç—å", callback_data="unseen"))
    markup.add(InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â—ë–Ω–Ω—ã–º", callback_data="point"))
    markup.add(InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="comments"))
    buttons = []

    if new_index > 0:
        buttons.append(
            InlineKeyboardButton("< –ù–∞–∑–∞–¥", callback_data=f"prev_{new_index - 1}")
        )

    if new_index < len(results) - 1:
        buttons.append(
            InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ >", callback_data=f"next_{new_index + 1}")
        )

    if buttons:
        markup.row(*buttons)

    if place[3]:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
        if message.photo:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            new_media = InputMediaPhoto(media=place[3], caption=message_text)
            bot.edit_message_media(
                media=new_media,
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=markup,
            )
        else:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_photo(
                message.chat.id,
                photo=place[3],
                caption=message_text,
                reply_markup=markup,
            )
    else:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ
        if message.photo:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, message_text, reply_markup=markup)
        else:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            bot.edit_message_text(
                message_text,
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=markup,
            )


@bot.callback_query_handler(func=lambda call: call.data.startswith(("next2_", "prev2_")))
def handle_comment_pagination(call):
    user_id = call.from_user.id
    results = user_results.get(user_id)
    # –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Å—Ç–∞
    place_name = (results[user_results["index"]][0],)
    place_id = db_service.get_place_by_name(place_name)[0]
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if call.data.startswith("next2_"):
        offset = int(call.data.split("_")[1])
    else:
        offset = int(call.data.split("_")[1])
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π/–ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ–ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    comment_data = db_service.get_next_non_empty_comment(place_id, offset) #–º–æ–∂–µ—Ç –æ—à–∏–±–∫–∞
    if comment_data:
        comment_text, comment_user_id, username, sentiment, feedback = comment_data
        markup = InlineKeyboardMarkup()
        buttons = []
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if offset > 0:
            buttons.append(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"prev2_{offset - 1}"))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        has_next = db_service.has_next(place_id, offset)
        if has_next:
            buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥", callback_data=f"next2_{offset + 1}"))
        if buttons:
            markup.row(*buttons)
        feedback = comment_data[4]
        sentiment = comment_data[3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ë–î
        emoji = "üòä" if sentiment == "—Ö–æ—Ä–æ—à–∏–π" else "üòû" if sentiment == "–ø–ª–æ—Ö–æ–π" else "üòê"
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"{emoji} <b>{username}</b> –æ—Ü–µ–Ω–∏–ª –Ω–∞ {feedback}/10:\n"
                 f"{comment_text}",
            parse_mode="HTML",
            reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data == "add_place")
def add_place_callback(call):
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)
    prompt = (
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–µ—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ), –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ: –ü—Ä–∏–º–µ—Ä\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–∏–º–µ—Ä\n"
        "–ö–ª—é—á: –ü—Ä–∏–º–µ—Ä"
    )
    msg = bot.send_message(call.message.chat.id, prompt)
    bot.register_next_step_handler(msg, process_place_input, user_id)


def process_place_input(message):
    if message.text in ["/cancel", "/menu"]:
        start_message(message)
        return

    if message.photo:
        photo_id = message.photo[-1].file_id
        text = message.caption or ""
    else:
        photo_id = None
        text = message.text or ""

    place_data = parser_service.parse_place_info(text)
    if not place_data:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:")
        bot.register_next_step_handler(msg, process_place_input)
        return

    if db_service.place_exists(place_data["name"]):
        msg = bot.send_message(message.chat.id, "–¢–∞–∫–æ–µ –º–µ—Å—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(msg, process_place_input)
        return

    db_service.add_place_to_db(place_data, photo_id)
    bot.send_message(message.chat.id, f"–ú–µ—Å—Ç–æ '{place_data['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")




@bot.callback_query_handler(func=lambda call: call.data == "edit_place")
def edit_place_callback(call):
    user_id = call.from_user.id
    if not db_service.check_user_role(user_id, "admin") and not db_service.check_user_role(user_id, "manager"):
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, select_place_for_edit, user_id)


def select_place_for_edit(message, user_id):
    if message.text == "/cancel" or message.text == "/menu":
        if user_id in temp_place_data:
            del temp_place_data[user_id]
        start_message(message)
        return
    place_id = message.text
    place = db_service.get_place_by_id(place_id)
    if not place:
        msg = bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ ID –º–µ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(msg, select_place_for_edit, user_id)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    temp_place_data[user_id] = {
        "place_id": place[0],
        "original": {
            "name": place[1],
            "description": place[2],
            "img": place[3]
        },
        "updates": {}
    }
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    msg = bot.send_message(
        message.chat.id,
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {place[1]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å:"
    )
    bot.register_next_step_handler(msg, edit_name_step, user_id)



def edit_name_step(message, user_id):
    if message.text == "/cancel" or message.text == "/menu":
        if user_id in temp_place_data:
            del temp_place_data[user_id]
        start_message(message)
        return

    if message.text.lower() == "/skip":
        temp_place_data[user_id]["updates"]["name"] = temp_place_data[user_id]["original"]["name"]
        msg = bot.send_message(
            message.chat.id,
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {temp_place_data[user_id]['original']['description']}\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å:"
        )
        bot.register_next_step_handler(msg, edit_description_step, user_id)
        return

    new_name = message.text.strip()
    if db_service.place_exists(message.text):
        msg = bot.send_message(message.chat.id, "–¢–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ:")
        bot.register_next_step_handler(msg, edit_name_step, user_id)
    else:
        temp_place_data[user_id]["updates"]["name"] = new_name
        msg = bot.send_message(
            message.chat.id,
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {temp_place_data[user_id]['original']['description']}\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å:"
        )
        bot.register_next_step_handler(msg, edit_description_step, user_id)



def edit_description_step(message, user_id):
    if message.text == "/cancel" or message.text == "/menu":
        if user_id in temp_place_data:
            del temp_place_data[user_id]
        start_message(message)
        return

    msg = bot.send_message(
        message.chat.id,
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å:"
    )

    if message.text.lower() == "/skip":
        temp_place_data[user_id]["updates"]["description"] = temp_place_data[user_id]["original"]["description"]
        bot.register_next_step_handler(msg, edit_image_step, user_id)
        return

    temp_place_data[user_id]["updates"]["description"] = message.text.strip()
    bot.register_next_step_handler(msg, edit_image_step, user_id)



def edit_image_step(message, user_id):
    if message.text == "/cancel" or message.text == "/menu":
        if user_id in temp_place_data:
            del temp_place_data[user_id]
        start_message(message)
        return

    if message.text and message.text.lower() == "/skip":
        temp_place_data[user_id]["updates"]["img"] = temp_place_data[user_id]["original"]["img"]
        apply_edits(message, user_id)
        return

    if message.photo:
        temp_place_data[user_id]["updates"]["img"] = message.photo[-1].file_id
    else:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ /skip:")
        bot.register_next_step_handler(msg, edit_image_step, user_id)
        return

    apply_edits(message, user_id)



def apply_edits(message, user_id):
    updates = temp_place_data[user_id]["updates"]
    place_id = temp_place_data[user_id]["place_id"]

    db_service.update_place(place_id, updates)
    bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    del temp_place_data[user_id]  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ


@bot.callback_query_handler(func=lambda call: call.data == "delete_place")
def delete_place_callback(call):
    user_id = call.from_user.id
    if not db_service.check_user_role(user_id, "admin"):
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    bot.answer_callback_query(call.id)
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, confirm_delete_place)



def confirm_delete_place(message):
    if message.text == "/cancel" or message.text == "/menu":
        start_message(message)
        return
    try:
        place_id = int(message.text)
        db_service.delete_place(place_id)
        bot.send_message(message.chat.id, f"–ú–µ—Å—Ç–æ {place_id} —É–¥–∞–ª–µ–Ω–æ.")
    except ValueError:
        msg = bot.send_message(message.chat.id, f"–ú–µ—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(msg, confirm_delete_place)


@bot.callback_query_handler(func=lambda call: call.data == "delete_user")
def delete_user_callback(call):
    user_id = call.from_user.id
    if not db_service.check_user_role(user_id, "admin"):
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    bot.answer_callback_query(call.id)
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, confirm_delete_user)



def confirm_delete_user(message):
    if message.text == "/cancel" or message.text == "/menu":
        start_message(message)
        return
    try:
        user_id = message.text
        a = db_service.find_user(user_id)
        if not a:
            raise ValueError("user_not_found")
        db_service.delete_user()
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω.")
    except ValueError as e:
        error_type = str(e)
        if error_type == "user_not_found":
            error_msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        else:
            error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 12345"
        msg = bot.send_message(message.chat.id, f"{error_msg}\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(msg, confirm_delete_user)


@bot.callback_query_handler(func=lambda call: call.data == "assign_role")
def assign_role_callback(call):
    user_id = call.from_user.id
    if not db_service.check_user_role(user_id, "admin"):
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    bot.answer_callback_query(call.id)
    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–æ–ª—å (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):"
    )
    bot.register_next_step_handler(msg, update_user_role)



def update_user_role(message):
    if message.text == "/cancel" or message.text == "/menu":
        start_message(message)
        return
    allowed_roles = {"admin", "user", "manager"}
    try:
        user_id, role = message.text.split()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞
        if role not in allowed_roles:
            raise ValueError("invalid_role")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        b = db_service.find_user(user_id)
        if not b:
            raise ValueError("user_not_found")
        curr_role = db_service.get_user_role(user_id)
        if role in curr_role:
            raise ValueError("same_role")

        db_service.change_role(role, user_id)
        bot.send_message(message.chat.id, f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role}.")
    except ValueError as e:
        error_type = str(e)
        if error_type == "invalid_role":
            error_msg = f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {', '.join(allowed_roles)}"
        elif error_type == "user_not_found":
            error_msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        elif error_type == "same_role":
            error_msg = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞ —ç—Ç–∞ —Ä–æ–ª—å"
        else:
            error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 12345 manager"
        msg = bot.send_message(message.chat.id, f"{error_msg}\n–í–≤–µ–¥–∏—Ç–µ ID –∏ —Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(msg, update_user_role)


@bot.callback_query_handler(func=lambda call: call.data == "delete_comment")
def delete_comment_callback(call):
    user_id = call.from_user.id
    if not db_service.check_user_role(user_id, "admin"):
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    bot.answer_callback_query(call.id)
    msg = bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –º–µ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):"
    )
    bot.register_next_step_handler(msg, confirm_delete_comment)



def confirm_delete_comment(message):
    if message.text == "/cancel" or message.text == "/menu":
        start_message(message)
        return
    try:
        user_id, place_id = map(int, message.text.split())
        c = db_service.find_user(user_id)
        if not c:
            raise ValueError("user_not_found")
        k = db_service.find_place(place_id)
        if not k:
            raise ValueError("place_not_found")
        db_service.delete_comment(user_id, place_id)
        bot.send_message(message.chat.id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω.")
    except ValueError as e:
        error_type = str(e)
        if error_type == "user_not_found":
            error_msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        elif error_type == "place_not_found":
            error_msg = "–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        else:
            error_msg = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 123 456"
        msg = bot.send_message(message.chat.id, f"{error_msg}\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –º–µ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ:")
        bot.register_next_step_handler(msg, confirm_delete_comment)

